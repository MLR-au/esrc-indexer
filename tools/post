#!/usr/local/scholarly-python2/bin/python

import sys
sys.path.append('../')
import argparse
import logging
import ConfigParser
import os.path
from indexer.Index import Index
from lxml import etree

class Poster:

    def __init__(self, site, config):
        # get the default configuration
        cfg = ConfigParser.SafeConfigParser()
        cfg.read(config)

        self.site = site
        site_configuration = os.path.join(self.config_get(cfg, 'GENERAL', 'configs'), site)
        self.site_cache = os.path.join(self.config_get(cfg, 'GENERAL', 'cache_path'), site)
        self.default_transforms = self.config_get(cfg, 'GENERAL', 'transforms')
        log.debug("Configuration: %s" % site_configuration)
        log.debug("Cache path: %s" % self.site_cache)

        # then try to load the site specific config
        if not os.path.exists(site_configuration):
            log.error("Can't access %s" % site_configuration)
            sys.exit()

        # read in the site specific configuration and kick off the run
        cfg.read(site_configuration)
        self.cfg = cfg

        self.solr_service = self.config_get(self.cfg, 'post', 'index')

    def config_get(self, cfg, section, param):

        if cfg.has_section(section) and cfg.has_option(section, param):
            return cfg.get(section, param)
        else:
            return None

if __name__ == "__main__":

    # read and check the options
    parser = argparse.ArgumentParser(description='eSRC Post Document Testing tool')

    parser.add_argument('--config',   dest='config', required=True, help='The path to the default Indexer configuration.')
    parser.add_argument('--site',     dest='site',   required=True, help='The site to process.')

    parser.add_argument('--post-document', dest='post_document', required=True,
        help='Post a single document to the index.')

    args = parser.parse_args()

    # get the logger
    logging.basicConfig(level=logging.DEBUG)
    log = logging.getLogger('POSTER')

    # check the arguments
    if not os.path.exists(args.config):
        log.error("Does %s exist?" % args.config)
        sys.exit()

    log.debug("Indexing: %s" % args.site)

    p = Poster(args.site, args.config)
    idx = Index(p.solr_service, args.site)
    doc = etree.parse(args.post_document)
    idx.submit(etree.tostring(doc), args.post_document)
    idx.commit()
    idx.optimize()





